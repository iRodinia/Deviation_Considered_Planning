// Generated by gencpp from file reference_governor/polyTraj.msg
// DO NOT EDIT!


#ifndef REFERENCE_GOVERNOR_MESSAGE_POLYTRAJ_H
#define REFERENCE_GOVERNOR_MESSAGE_POLYTRAJ_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <std_msgs/Time.h>
#include <std_msgs/Float64MultiArray.h>
#include <std_msgs/Float64.h>

namespace reference_governor
{
template <class ContainerAllocator>
struct polyTraj_
{
  typedef polyTraj_<ContainerAllocator> Type;

  polyTraj_()
    : header()
    , start_planning_time()
    , poly_coefs()
    , poly_duration()  {
    }
  polyTraj_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , start_planning_time(_alloc)
    , poly_coefs(_alloc)
    , poly_duration(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::std_msgs::Time_<ContainerAllocator>  _start_planning_time_type;
  _start_planning_time_type start_planning_time;

   typedef  ::std_msgs::Float64MultiArray_<ContainerAllocator>  _poly_coefs_type;
  _poly_coefs_type poly_coefs;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _poly_duration_type;
  _poly_duration_type poly_duration;





  typedef boost::shared_ptr< ::reference_governor::polyTraj_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::reference_governor::polyTraj_<ContainerAllocator> const> ConstPtr;

}; // struct polyTraj_

typedef ::reference_governor::polyTraj_<std::allocator<void> > polyTraj;

typedef boost::shared_ptr< ::reference_governor::polyTraj > polyTrajPtr;
typedef boost::shared_ptr< ::reference_governor::polyTraj const> polyTrajConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::reference_governor::polyTraj_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::reference_governor::polyTraj_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::reference_governor::polyTraj_<ContainerAllocator1> & lhs, const ::reference_governor::polyTraj_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.start_planning_time == rhs.start_planning_time &&
    lhs.poly_coefs == rhs.poly_coefs &&
    lhs.poly_duration == rhs.poly_duration;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::reference_governor::polyTraj_<ContainerAllocator1> & lhs, const ::reference_governor::polyTraj_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace reference_governor

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::reference_governor::polyTraj_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::reference_governor::polyTraj_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::reference_governor::polyTraj_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::reference_governor::polyTraj_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::reference_governor::polyTraj_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::reference_governor::polyTraj_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::reference_governor::polyTraj_<ContainerAllocator> >
{
  static const char* value()
  {
    return "71bc53ae599621f980c4732c605466da";
  }

  static const char* value(const ::reference_governor::polyTraj_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x71bc53ae599621f9ULL;
  static const uint64_t static_value2 = 0x80c4732c605466daULL;
};

template<class ContainerAllocator>
struct DataType< ::reference_governor::polyTraj_<ContainerAllocator> >
{
  static const char* value()
  {
    return "reference_governor/polyTraj";
  }

  static const char* value(const ::reference_governor::polyTraj_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::reference_governor::polyTraj_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"std_msgs/Time start_planning_time\n"
"std_msgs/Float64MultiArray poly_coefs\n"
"std_msgs/Float64 poly_duration\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Time\n"
"time data\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Float64MultiArray\n"
"# Please look at the MultiArrayLayout message definition for\n"
"# documentation on all multiarrays.\n"
"\n"
"MultiArrayLayout  layout        # specification of data layout\n"
"float64[]         data          # array of data\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/MultiArrayLayout\n"
"# The multiarray declares a generic multi-dimensional array of a\n"
"# particular data type.  Dimensions are ordered from outer most\n"
"# to inner most.\n"
"\n"
"MultiArrayDimension[] dim # Array of dimension properties\n"
"uint32 data_offset        # padding elements at front of data\n"
"\n"
"# Accessors should ALWAYS be written in terms of dimension stride\n"
"# and specified outer-most dimension first.\n"
"# \n"
"# multiarray(i,j,k) = data[data_offset + dim_stride[1]*i + dim_stride[2]*j + k]\n"
"#\n"
"# A standard, 3-channel 640x480 image with interleaved color channels\n"
"# would be specified as:\n"
"#\n"
"# dim[0].label  = \"height\"\n"
"# dim[0].size   = 480\n"
"# dim[0].stride = 3*640*480 = 921600  (note dim[0] stride is just size of image)\n"
"# dim[1].label  = \"width\"\n"
"# dim[1].size   = 640\n"
"# dim[1].stride = 3*640 = 1920\n"
"# dim[2].label  = \"channel\"\n"
"# dim[2].size   = 3\n"
"# dim[2].stride = 3\n"
"#\n"
"# multiarray(i,j,k) refers to the ith row, jth column, and kth channel.\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/MultiArrayDimension\n"
"string label   # label of given dimension\n"
"uint32 size    # size of given dimension (in type units)\n"
"uint32 stride  # stride of given dimension\n"
"================================================================================\n"
"MSG: std_msgs/Float64\n"
"float64 data\n"
;
  }

  static const char* value(const ::reference_governor::polyTraj_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::reference_governor::polyTraj_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.start_planning_time);
      stream.next(m.poly_coefs);
      stream.next(m.poly_duration);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct polyTraj_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::reference_governor::polyTraj_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::reference_governor::polyTraj_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "start_planning_time: ";
    s << std::endl;
    Printer< ::std_msgs::Time_<ContainerAllocator> >::stream(s, indent + "  ", v.start_planning_time);
    s << indent << "poly_coefs: ";
    s << std::endl;
    Printer< ::std_msgs::Float64MultiArray_<ContainerAllocator> >::stream(s, indent + "  ", v.poly_coefs);
    s << indent << "poly_duration: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.poly_duration);
  }
};

} // namespace message_operations
} // namespace ros

#endif // REFERENCE_GOVERNOR_MESSAGE_POLYTRAJ_H
